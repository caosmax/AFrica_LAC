facet_grid(.~Status, scales = "fixed", space = "fixed") +theme(strip.text=element_text(size=8))+
theme(strip.text.y = element_text(angle = 0,size = 12))
plot(n)
dev.off()
cat(paste(crops[c], " It has been completed\n", sep=""))
c=3
c_files <- list.files(path=data_out, pattern="SummaryCases.csv", full.names = T)
c_files<- lapply(c_files,read.csv,stringsAsFactors = F)
c_files <- do.call(rbind,c_files)
c_files$X<- NULL
c_files<- filter(c_files, System=="IRRI")
c=3
c_files<- filter(c_files, crop==crops[c])
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')
png(filename = paste(data_out,crops[c],"_IRRI_behaviour_Data",".png",sep=""),
width = 20, height = 12, units = 'in', res = 100)
require(ggplot2)
n<- ggplot(data =c_files, aes(Scenario,fpu)) +
geom_tile(aes(fill = ratio), colour = "white")+
labs(x=NULL, y=NULL, title="") +
scale_fill_gradientn(colours = hm.palette(100))+ theme_grey() +
labs(x = "",y = "") + labs(title = paste( "Rendimientos muy altos, muy bajos, fallidos, y normales a nivel de pixel. Estos, se expresan como tasa usando la distribución de datos a nivel de FPU \nCultivo = ",unique(c_files$crop), "", ", sistema= Irrigado", sep = ""))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + coord_equal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12))+
theme(axis.text.y = element_text(hjust = 1, size = 12))+
theme(strip.text.x = element_text(size = 12, face = "bold.italic"))+
facet_grid(.~Status, scales = "fixed", space = "fixed") +theme(strip.text=element_text(size=8))+
theme(strip.text.y = element_text(angle = 0,size = 12))
plot(n)
dev.off()
cat(paste(crops[c], " It has been completed\n", sep=""))
plot(n)
c=4
c_files <- list.files(path=data_out, pattern="SummaryCases.csv", full.names = T)
c_files<- lapply(c_files,read.csv,stringsAsFactors = F)
c_files <- do.call(rbind,c_files)
c_files$X<- NULL
c_files<- filter(c_files, System=="IRRI")
c_files<- filter(c_files, crop==crops[c])
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')
png(filename = paste(data_out,crops[c],"_IRRI_behaviour_Data",".png",sep=""),
width = 20, height = 12, units = 'in', res = 100)
require(ggplot2)
n<- ggplot(data =c_files, aes(Scenario,fpu)) +
geom_tile(aes(fill = ratio), colour = "white")+
labs(x=NULL, y=NULL, title="") +
scale_fill_gradientn(colours = hm.palette(100))+ theme_grey() +
labs(x = "",y = "") + labs(title = paste( "Rendimientos muy altos, muy bajos, fallidos, y normales a nivel de pixel. Estos, se expresan como tasa usando la distribución de datos a nivel de FPU \nCultivo = ",unique(c_files$crop), "", ", sistema= Irrigado", sep = ""))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + coord_equal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12))+
theme(axis.text.y = element_text(hjust = 1, size = 12))+
theme(strip.text.x = element_text(size = 12, face = "bold.italic"))+
facet_grid(.~Status, scales = "fixed", space = "fixed") +theme(strip.text=element_text(size=8))+
theme(strip.text.y = element_text(angle = 0,size = 12))
plot(n)
dev.off()
cat(paste(crops[c], " It has been completed\n", sep=""))
plot(n)
c=5
c_files <- list.files(path=data_out, pattern="SummaryCases.csv", full.names = T)
c_files<- lapply(c_files,read.csv,stringsAsFactors = F)
c_files <- do.call(rbind,c_files)
c_files$X<- NULL
c_files<- filter(c_files, System=="IRRI")
library(dplyr)
library(RColorBrewer)
c_files<- filter(c_files, crop==crops[c])
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')
png(filename = paste(data_out,crops[c],"_IRRI_behaviour_Data",".png",sep=""),
width = 20, height = 12, units = 'in', res = 100)
require(ggplot2)
n<- ggplot(data =c_files, aes(Scenario,fpu)) +
geom_tile(aes(fill = ratio), colour = "white")+
labs(x=NULL, y=NULL, title="") +
scale_fill_gradientn(colours = hm.palette(100))+ theme_grey() +
labs(x = "",y = "") + labs(title = paste( "Rendimientos muy altos, muy bajos, fallidos, y normales a nivel de pixel. Estos, se expresan como tasa usando la distribución de datos a nivel de FPU \nCultivo = ",unique(c_files$crop), "", ", sistema= Irrigado", sep = ""))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + coord_equal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12))+
theme(axis.text.y = element_text(hjust = 1, size = 12))+
theme(strip.text.x = element_text(size = 12, face = "bold.italic"))+
facet_grid(.~Status, scales = "fixed", space = "fixed") +theme(strip.text=element_text(size=8))+
theme(strip.text.y = element_text(angle = 0,size = 12))
plot(n)
dev.off()
cat(paste(crops[c], " It has been completed\n", sep=""))
plot(n)
c_files <- list.files(path=data_out, pattern="SummaryCases.csv", full.names = T)
c_files<- lapply(c_files,read.csv,stringsAsFactors = F)
c_files <- do.call(rbind,c_files)
c_files$X<- NULL
for(c in 1:length(crops)){
c_files <- list.files(path=data_out, pattern="SummaryCases.csv", full.names = T)
c_files<- lapply(c_files,read.csv,stringsAsFactors = F)
c_files <- do.call(rbind,c_files)
c_files$X<- NULL
c_files<- filter(c_files, System=="IRRI")
c_files<- filter(c_files, crop==crops[c])
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')
png(filename = paste(data_out,crops[c],"_IRRI_behaviour_Data",".png",sep=""),
width = 20, height = 12, units = 'in', res = 100)
require(ggplot2)
n<- ggplot(data =c_files, aes(Scenario,fpu)) +
geom_tile(aes(fill = ratio), colour = "white")+
labs(x=NULL, y=NULL, title="") +
scale_fill_gradientn(colours = hm.palette(100))+ theme_grey() +
labs(x = "",y = "") + labs(title = paste( "Rendimientos muy altos, muy bajos, fallidos, y normales a nivel de pixel. Estos, se expresan como tasa usando la distribución de datos a nivel de FPU \nCultivo = ",unique(c_files$crop), "", ", sistema= Irrigado", sep = ""))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + coord_equal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12))+
theme(axis.text.y = element_text(hjust = 1, size = 12))+
theme(strip.text.x = element_text(size = 12, face = "bold.italic"))+
facet_grid(.~Status, scales = "fixed", space = "fixed") +theme(strip.text=element_text(size=8))+
theme(strip.text.y = element_text(angle = 0,size = 12))
plot(n)
dev.off()
cat(paste(crops[c], " It has been completed\n", sep=""))
}
for(s in 1:length(sys)){
c_files <- list.files(path=data_out, pattern="SummaryCases.csv", full.names = T)
c_files<- lapply(c_files,read.csv,stringsAsFactors = F)
c_files <- do.call(rbind,c_files)
c_files$X<- NULL
c_files<- filter(c_files, System==sys[s])
for(c in 1:length(crops)){
c_files<- filter(c_files, crop==crops[c])
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')
png(filename = paste(data_out,crops[c],"_", sys[s],"_behaviour_Data",".png",sep=""),
width = 20, height = 12, units = 'in', res = 100)
require(ggplot2)
n<- ggplot(data =c_files, aes(Scenario,fpu)) +
geom_tile(aes(fill = ratio), colour = "white")+
labs(x=NULL, y=NULL, title="") +
scale_fill_gradientn(colours = hm.palette(100))+ theme_grey() +
labs(x = "",y = "") + labs(title = paste( "Rendimientos muy altos, muy bajos, fallidos, y normales a nivel de pixel. Estos, se expresan como tasa usando la distribución de datos a nivel de FPU \nCultivo = ",crops[c], "", ", sistema= ", sys[s], sep = ""))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + coord_equal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12))+
theme(axis.text.y = element_text(hjust = 1, size = 12))+
theme(strip.text.x = element_text(size = 12, face = "bold.italic"))+
facet_grid(.~Status, scales = "fixed", space = "fixed") +theme(strip.text=element_text(size=8))+
theme(strip.text.y = element_text(angle = 0,size = 12))
plot(n)
dev.off()
cat(paste(crops[c], " It has been completed\n", sep=""))
}
cat(paste(crops[c]," ", sys[s], " It has been completed\n", sep=""))
}
for(c in 1:length(crops)){
c_files <- list.files(path=data_out, pattern="SummaryCases.csv", full.names = T)
c_files<- lapply(c_files,read.csv,stringsAsFactors = F)
c_files <- do.call(rbind,c_files)
c_files$X<- NULL
c_files<- filter(c_files, System=="IRRI")
c_files<- filter(c_files, crop==crops[c])
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')
png(filename = paste(data_out,crops[c],"_IRRI_behaviour_Data",".png",sep=""),
width = 20, height = 12, units = 'in', res = 100)
require(ggplot2)
n<- ggplot(data =c_files, aes(Scenario,fpu)) +
geom_tile(aes(fill = ratio), colour = "white")+
labs(x=NULL, y=NULL, title="") +
scale_fill_gradientn(colours = hm.palette(100))+ theme_grey() +
labs(x = "",y = "") + labs(title = paste( "Rendimientos muy altos, muy bajos, fallidos, y normales a nivel de pixel. Estos, se expresan como tasa usando la distribución de datos a nivel de FPU \nCultivo = ",unique(c_files$crop), "", ", sistema= Irrigado", sep = ""))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + coord_equal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12))+
theme(axis.text.y = element_text(hjust = 1, size = 12))+
theme(strip.text.x = element_text(size = 12, face = "bold.italic"))+
facet_grid(.~Status, scales = "fixed", space = "fixed") +theme(strip.text=element_text(size=8))+
theme(strip.text.y = element_text(angle = 0,size = 12))
plot(n)
dev.off()
cat(paste(crops[c], " It has been completed\n", sep=""))
}
library(dplyr)
library(RColorBrewer)
for(c in 1:length(crops)){
c_files <- list.files(path=data_out, pattern="SummaryCases.csv", full.names = T)
c_files<- lapply(c_files,read.csv,stringsAsFactors = F)
c_files <- do.call(rbind,c_files)
c_files$X<- NULL
c_files<- filter(c_files, System=="RA")
c_files<- filter(c_files, crop==crops[c])
hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')
png(filename = paste(data_out,crops[c],"_RA_behaviour_Data",".png",sep=""),
width = 20, height = 12, units = 'in', res = 100)
require(ggplot2)
n<- ggplot(data =c_files, aes(Scenario,fpu)) +
geom_tile(aes(fill = ratio), colour = "white")+
labs(x=NULL, y=NULL, title="") +
scale_fill_gradientn(colours = hm.palette(100))+ theme_grey() +
labs(x = "",y = "") + labs(title = paste( "Rendimientos muy altos, muy bajos, fallidos, y normales a nivel de pixel. Estos, se expresan como tasa usando la distribución de datos a nivel de FPU \nCultivo = ",unique(c_files$crop), "", ", sistema= Secano", sep = ""))+
scale_x_discrete(expand = c(0, 0)) + scale_y_discrete(expand = c(0, 0)) + coord_equal()+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 12))+
theme(axis.text.y = element_text(hjust = 1, size = 12))+
theme(strip.text.x = element_text(size = 12, face = "bold.italic"))+
facet_grid(.~Status, scales = "fixed", space = "fixed") +theme(strip.text=element_text(size=8))+
theme(strip.text.y = element_text(angle = 0,size = 12))
plot(n)
dev.off()
cat(paste(crops[c], " It has been completed\n", sep=""))
}
########################################### detection outliers ####################################################
gdr1<- c("//dapadfs/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/Pixels/")
#Lista de tipos de sistemas
sys<- c( "IRRI", "RA")
crops<- c("Rice","Bean","Wheat","Maize", "Soybean")
reg<- read.csv("//dapadfs/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/ListFPUs.csv",header = T,stringsAsFactors = F )
pots<- reg[,1]
data_out<-c("//dapadfs/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/Pixels/outliers/")
gdr1
c_files <- list.files(path= data_out, pattern ="OutliersGCMs.csv",full.names = T)
c_files
gdr1<- c("//dapadfs/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/Pixels/")
sys<- c( "IRRI", "RA")
crops<- c("Rice","Bean","Wheat","Maize", "Soybean")
reg<- read.csv("//dapadfs/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/ListFPUs.csv",header = T,stringsAsFactors = F )
data_out<-c("//dapadfs/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/Pixels/outliers/")
c=1
c_files <- list.files(path= paste(gdr1,crops[c],"/",sep=""), pattern =".csv",full.names = T)
c_files
c_files <- list.files(path=data_out, pattern =c("DataExtremes_"),full.names = T)
c_files
wfdFiles<- read.csv("//dapadfs/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/Pixels/WFD/AnalysisDataHistorical/SummaryCasesWFD.csv", header = T)
View(wfdFiles)
names(wfdFiles)
wfdFiles$X<- NULL
wfdFiles$X<- NULL
names(wfdFiles)
g=gc;rm(list=ls())
initial<-c("//dapadfs/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/ResultsIMPACT/AggregationBID/Phase1/")
updated<-c("//dapadfs/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/ResultsIMPACT/AggregationBID/Phase2/")
p1<- list(read.csv(paste(initial,"Resultados_Ciat_StCty_31_08_16_new.csv", sep = "")))
p1[1]
p2<- list.files(updated, pattern ="_05_18.csv", full.names = T)
p2<- lapply(p2, read.csv, stringsAsFactors = F)
g=gc;rm(list = ls())
########################################### Detection outliers ####################################################
gdr1<- c("//dapadfs/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/Pixels/")
sys<- c( "IRRI", "RA")
crops<- c("Rice","Bean","Wheat","Maize", "Soybean")
# reg<- read.csv("//dapadfs/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/ListFPUs.csv",header = T,stringsAsFactors = F )
# pots<- reg[,1]
data_out<-c("//dapadfs/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/Pixels/outliers/")
c_files <- list.files(path=data_out, pattern =c("DataExtremes_"),full.names = T)
c_files
c_files <- list.files(path=data_out, pattern =c("DataExtremes_"),full.names = T)
c_files <- lapply(c_files, read.csv, stringsAsFactors = F)
c_files <- do.call(rbind,c_files)
c_files$X<- NULL
write.csv(c_files,paste(data_out, "SummaryLowest&HightestWFD.csv", sep = ""))
data_out
saveRDS(c_files,paste(data_out, "SummaryLowest&HightestWFD.RDS", sep = ""))
View(c_files)
g=gc;rm(list = ls())
g=gc;rm(list=ls())
grd1<-("//dapadfs/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/Pixels/VariesSelect/")
copy<- ("//dapadfs/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/YieldsWeight/")
gcm <- c("bcc_csm1_1", "bnu_esm","cccma_canesm2", "gfld_esm2g", "inm_cm4", "ipsl_cm5a_lr",
"miroc_miroc5", "mpi_esm_mr", "ncc_noresm1_m")
#objetos
sys<- c( "IRRI", "RA")
crops<- c("Rice","Bean","Wheat","Maize","Soybean")
c=1
s=1
dataF<-list.files(path =grd1,pattern = paste(crops[c],"_",sys[s],"_.csv",sep=""),full.names = T)
dataF<-lapply(dataF,read.csv,stringsAsFactors = F)
DataFiles<- do.call(rbind,dataF)
DataFiles$X<- NULL
gcm<- unique(DataFiles$sce)
c=1
s=1
g=1
dataF<-list.files(path =grd1,pattern = paste(crops[c],"_",sys[s],"_.csv",sep=""),full.names = T)
dataF<-lapply(dataF,read.csv,stringsAsFactors = F)
DataFiles<- do.call(rbind,dataF)
DataFiles$X<- NULL
gcm<- unique(DataFiles$sce)
#filtrar por gcm;sys
DataFiles<- DataFiles[which(DataFiles$sce==gcm[g]),]
#Agregar columnas de producción de 2022 a 2049
DataFiles[,paste0("Prod_20",22:49)]<-DataFiles[,"Area"]*DataFiles[,paste0("X20",22:49)]
DataFiles[,'ones'] = 1
#Find areas where consistently failing and discard these from aggregation
zeros.wfd.r = apply(DataFiles[,8:ncol(DataFiles)],1,function(x) sum(x==0,na.rm=T))
ind.falla = which(zeros.wfd.r>=14)
#Descartar pixeles con más de 13 años con fallas en la linea base
if(sum(ind.falla) == 0)
{
DataFiles<-DataFiles
} else {
DataFiles<-DataFiles[-ind.falla,]
}
#Eliminar las columnas de los rendimientos
DataFiles<-DataFiles[,!names(DataFiles) %in% (paste0("X20",22:49))]
#Agregar producción y area a nivel de fpu
DataFiles_fpu<-aggregate(DataFiles[,c("ones","Area",paste0("Prod_20",22:49))],by=list(DataFiles[,"FPU"]),FUN= function(x) {sum(x, na.rm=TRUE)} )
#Agregar Rendimientos a nivel de fpu (rendimiento ponderado)
DataFiles_fpu[,paste0("Rend_fpu_20",22:49)]<-DataFiles_fpu[,paste0("Prod_20",22:49)]/DataFiles_fpu[,"Area"]
#Crear un data frame con sólo FPU y rend a nivel de fpu
DataFiles_fpu<- DataFiles_fpu[,c("Group.1","ones",paste0("Rend_fpu_20",22:49))]
#Asignar nombres apropiados a las columnas
colnames(DataFiles_fpu)<-c("FPU","num_pixels",paste0("Rend_fpu_20",22:49))
DataFiles_fpu$sce<- gcm[g]
DataFiles_fpu$sys<- sys[s]
#Ordenar datos
DataFiles_fpu<- DataFiles_fpu[,c("FPU","num_pixels", "sce", "sys", paste0("Rend_fpu_20",22:49))]
View(DataFiles_fpu)
dataF<-list.files(path =grd1,pattern =paste(crops[c],"_", sys[s],"_WFD",sep = ""), full.names = T)
dataF<-lapply(dataF,read.csv,stringsAsFactors = F)
DataFiles<- do.call(rbind,dataF)
DataFiles$X<- NULL
rownames(DataFiles)<- 1:nrow(DataFiles)
#Agregar columnas de producción de 2022 a 2049
DataFiles[,paste0("Prod_20",22:49)]<-DataFiles[,"Area"]*DataFiles[,paste0("X20",22:49)]
DataFiles[,'ones'] = 1
#Find areas where consistently failing and discard these from aggregation
zeros.wfd.r = apply(DataFiles[,8:ncol(DataFiles)],1,function(x) sum(x==0,na.rm=T))
ind.falla = which(zeros.wfd.r>=14)
#Descartar pixeles con más de 13 años con fallas en la linea base
if(sum(ind.falla) == 0)
{
DataFiles<-DataFiles
} else {
DataFiles<-DataFiles[-ind.falla,]
}
#Eliminar las columnas de los rendimientos
DataFiles<-DataFiles[,!names(DataFiles) %in% (paste0("X20",22:49))]
#Agregar producción y area a nivel de fpu
DataFiles_fpu<-aggregate(DataFiles[,c("ones","Area",paste0("Prod_20",22:49))],by=list(DataFiles[,"FPU"]),FUN= function(x) {sum(x, na.rm=TRUE)} )
#Agregar Rendimientos a nivel de fpu (rendimiento ponderado)
DataFiles_fpu[,paste0("Rend_fpu_20",22:49)]<-DataFiles_fpu[,paste0("Prod_20",22:49)]/DataFiles_fpu[,"Area"]
#Crear un data frame con sólo FPU y rend a nivel de fpu
DataFiles_fpu<- DataFiles_fpu[,c("Group.1","ones",paste0("Rend_fpu_20",22:49))]
#Asignar nombres apropiados a las columnas
colnames(DataFiles_fpu)<-c("FPU","num_pixels",paste0("Rend_fpu_20",22:49))
DataFiles_fpu$sce<- "WFD"
DataFiles_fpu$sys<- sys[s]
#Ordenar datos
DataFiles_fpu<- DataFiles_fpu[,c("FPU","num_pixels", "sce", "sys", paste0("Rend_fpu_20",22:49))]
View(DataFiles_fpu)
dataF<-list.files(path =grd1,pattern =paste(crops[c],"_", sys[s],"_WFD",sep = ""), full.names = T)
dataF<-lapply(dataF,read.csv,stringsAsFactors = F)
DataFiles<- do.call(rbind,dataF)
DataFiles$X<- NULL
rownames(DataFiles)<- 1:nrow(DataFiles)
View(DataFiles)
c=1
s=1
g=1
dataF<-list.files(path =grd1,pattern = paste(crops[c],"_",sys[s],"_.csv",sep=""),full.names = T)
dataF<-lapply(dataF,read.csv,stringsAsFactors = F)
DataFiles<- do.call(rbind,dataF)
DataFiles$X<- NULL
gcm<- unique(DataFiles$sce)
#filtrar por gcm;sys
DataFiles<- DataFiles[which(DataFiles$sce==gcm[g]),]
#Agregar columnas de producción de 2022 a 2049
DataFiles[,paste0("Prod_20",22:49)]<-DataFiles[,"Area"]*DataFiles[,paste0("X20",22:49)]
DataFiles[,'ones'] = 1
#Find areas where consistently failing and discard these from aggregation
zeros.wfd.r = apply(DataFiles[,8:ncol(DataFiles)],1,function(x) sum(x==0,na.rm=T))
ind.falla = which(zeros.wfd.r>=14)
View(DataFiles)
#Descartar pixeles con más de 13 años con fallas en la linea base
if(sum(ind.falla) == 0)
{
DataFiles<-DataFiles
} else {
DataFiles<-DataFiles[-ind.falla,]
}
dataF<-list.files(path =grd1,pattern = paste(crops[c],"_",sys[s],"_.csv",sep=""),full.names = T)
dataF<-lapply(dataF,read.csv,stringsAsFactors = F)
DataFiles<- do.call(rbind,dataF)
DataFiles$X<- NULL
gcm<- unique(DataFiles$sce)
#Descartar pixeles con más de 13 años con fallas en la linea base
if(sum(ind.falla) == 0)
{
DataFiles<-DataFiles
} else {
DataFiles<-DataFiles[-ind.falla,]
}
View(DataFiles)
dataF<-list.files(path =grd1,pattern = paste(crops[c],"_",sys[s],"_.csv",sep=""),full.names = T)
dataF<-lapply(dataF,read.csv,stringsAsFactors = F)
DataFiles<- do.call(rbind,dataF)
DataFiles$X<- NULL
gcm<- unique(DataFiles$sce)
dataF<-list.files(path =grd1,pattern = paste(crops[c],"_",sys[s],"_.csv",sep=""),full.names = T)
dataF<-lapply(dataF,read.csv,stringsAsFactors = F)
DataFiles<- do.call(rbind,dataF)
DataFiles$X<- NULL
gcm<- unique(DataFiles$sce)
zeros.wfd.r = apply(DataFiles[,8:ncol(DataFiles)],1,function(x) sum(x==0,na.rm=T))
ind.falla = which(zeros.wfd.r>=14)
ind.falla
dataF<-list.files(path =grd1,pattern = paste(crops[c],"_",sys[s],"_.csv",sep=""),full.names = T)
dataF<-lapply(dataF,read.csv,stringsAsFactors = F)
DataFiles<- do.call(rbind,dataF)
DataFiles$X<- NULL
gcm<- unique(DataFiles$sce)
#Find areas where consistently failing and discard these from aggregation
zeros.wfd.r = apply(DataFiles[,8:ncol(DataFiles)],1,function(x) sum(x==0,na.rm=T))
ind.falla = which(zeros.wfd.r>=14)
sum(ind.falla) == 0
DataFiles<-DataFiles[-ind.falla,]
# codigo de agregacion version carlos
#GCMs----------------------
#directorios
grd1<-("//dapadfs/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/Pixels/VariesSelect/")
copy<- ("//dapadfs/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/YieldsWeight/")
gcm <- c("bcc_csm1_1", "bnu_esm","cccma_canesm2", "gfld_esm2g", "inm_cm4", "ipsl_cm5a_lr",
"miroc_miroc5", "mpi_esm_mr", "ncc_noresm1_m")
#objetos
sys<- c( "IRRI", "RA")
crops<- c("Rice","Bean","Wheat","Maize","Soybean")
# c=1
# s=1
# g=1
for(c in 1:length(crops)){
for(g in 1:length(gcm)){
try(for(s in 1:length(sys)){
dataF<-list.files(path =grd1,pattern = paste(crops[c],"_",sys[s],"_.csv",sep=""),full.names = T)
dataF<-lapply(dataF,read.csv,stringsAsFactors = F)
DataFiles<- do.call(rbind,dataF)
DataFiles$X<- NULL
gcm<- unique(DataFiles$sce)
#Find areas where consistently failing and discard these from aggregation
zeros.wfd.r = apply(DataFiles[,8:ncol(DataFiles)],1,function(x) sum(x==0,na.rm=T))
ind.falla = which(zeros.wfd.r>=14)
#Descartar pixeles con más de 13 años con fallas en la linea base
if(sum(ind.falla) == 0)
{
DataFiles<-DataFiles
} else {
DataFiles<-DataFiles[-ind.falla,]
}
#filtrar por gcm;sys
DataFiles<- DataFiles[which(DataFiles$sce==gcm[g]),]
#Agregar columnas de producción de 2022 a 2049
DataFiles[,paste0("Prod_20",22:49)]<-DataFiles[,"Area"]*DataFiles[,paste0("X20",22:49)]
DataFiles[,'ones'] = 1
#Eliminar las columnas de los rendimientos
DataFiles<-DataFiles[,!names(DataFiles) %in% (paste0("X20",22:49))]
#Agregar producción y area a nivel de fpu
DataFiles_fpu<-aggregate(DataFiles[,c("ones","Area",paste0("Prod_20",22:49))],by=list(DataFiles[,"FPU"]),FUN= function(x) {sum(x, na.rm=TRUE)} )
#Agregar Rendimientos a nivel de fpu (rendimiento ponderado)
DataFiles_fpu[,paste0("Rend_fpu_20",22:49)]<-DataFiles_fpu[,paste0("Prod_20",22:49)]/DataFiles_fpu[,"Area"]
#Crear un data frame con sólo FPU y rend a nivel de fpu
DataFiles_fpu<- DataFiles_fpu[,c("Group.1","ones",paste0("Rend_fpu_20",22:49))]
#Asignar nombres apropiados a las columnas
colnames(DataFiles_fpu)<-c("FPU","num_pixels",paste0("Rend_fpu_20",22:49))
DataFiles_fpu$sce<- gcm[g]
DataFiles_fpu$sys<- sys[s]
#Ordenar datos
DataFiles_fpu<- DataFiles_fpu[,c("FPU","num_pixels", "sce", "sys", paste0("Rend_fpu_20",22:49))]
#Exportar resultados
write.csv(DataFiles_fpu,paste(copy,crops[c],"_",sys[s],"_",gcm[g], "_FPU.csv", sep = ""))
cat(paste("Running Yields weight and aggregate for ", crops[c]," ", sys[s], " ",  gcm[g], " it's done\n", sep = "" ))
} )
}
}
#Datos historicos---------------
#directorios
#objetos
w<- "WFD"
for(c in 1:length(crops)){
for(s in 1:length(sys)){
dataF<-list.files(path =grd1,pattern =paste(crops[c],"_", sys[s],"_WFD",sep = ""), full.names = T)
dataF<-lapply(dataF,read.csv,stringsAsFactors = F)
DataFiles<- do.call(rbind,dataF)
DataFiles$X<- NULL
rownames(DataFiles)<- 1:nrow(DataFiles)
#Find areas where consistently failing and discard these from aggregation
zeros.wfd.r = apply(DataFiles[,8:ncol(DataFiles)],1,function(x) sum(x==0,na.rm=T))
ind.falla = which(zeros.wfd.r>=14)
#Descartar pixeles con más de 13 años con fallas en la linea base
if(sum(ind.falla) == 0)
{
DataFiles<-DataFiles
} else {
DataFiles<-DataFiles[-ind.falla,]
}
#Agregar columnas de producción de 2022 a 2049
DataFiles[,paste0("Prod_20",22:49)]<-DataFiles[,"Area"]*DataFiles[,paste0("X20",22:49)]
DataFiles[,'ones'] = 1
#Eliminar las columnas de los rendimientos
DataFiles<-DataFiles[,!names(DataFiles) %in% (paste0("X20",22:49))]
#Agregar producción y area a nivel de fpu
DataFiles_fpu<-aggregate(DataFiles[,c("ones","Area",paste0("Prod_20",22:49))],by=list(DataFiles[,"FPU"]),FUN= function(x) {sum(x, na.rm=TRUE)} )
#Agregar Rendimientos a nivel de fpu (rendimiento ponderado)
DataFiles_fpu[,paste0("Rend_fpu_20",22:49)]<-DataFiles_fpu[,paste0("Prod_20",22:49)]/DataFiles_fpu[,"Area"]
#Crear un data frame con sólo FPU y rend a nivel de fpu
DataFiles_fpu<- DataFiles_fpu[,c("Group.1","ones",paste0("Rend_fpu_20",22:49))]
#Asignar nombres apropiados a las columnas
colnames(DataFiles_fpu)<-c("FPU","num_pixels",paste0("Rend_fpu_20",22:49))
DataFiles_fpu$sce<- "WFD"
DataFiles_fpu$sys<- sys[s]
#Ordenar datos
DataFiles_fpu<- DataFiles_fpu[,c("FPU","num_pixels", "sce", "sys", paste0("Rend_fpu_20",22:49))]
#Exportar resultados
write.csv(DataFiles_fpu,paste(copy,crops[c],"_",sys[s],"_","WFD", "_FPU.csv", sep = ""))
cat(paste("Running Yields weight and aggregate for ", crops[c], " " , sys[s] , " WFD", " it's done\n", sep = "" ))
}
}
g=gc;rm(list = ls())
g=gc;rm(list = ls())
g=gc;rm(list=ls())
######################################################## Codes Github #######################################################
# Para replicar los codigos aca presentados se debe acceder al github re-running
setwd("C:/Users/CEGONZALEZ/Documents/GitHub/gfsf_project/_scripts")
source("C:/Users/CEGONZALEZ/Documents/GitHub/gfsf_project/_scripts/CalculoTasasCrecimientoAnualizadas.R")
source("C:/Users/CEGONZALEZ/Documents/GitHub/gfsf_project/_scripts/AgreggationVersionCarlosRice.R")
g=gc;rm(list = ls())
